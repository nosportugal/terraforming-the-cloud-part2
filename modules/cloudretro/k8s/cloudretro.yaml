#
#
# The following yaml script will install a cloud-retro setup in your Kubernetes cluster
# with the needed services. With an invalid configuration of course, for this to properly work
# You need the apply-config.sh minimalistic shell script to update the config with the unclear addresses.
#
#
# In short, no touching.
#
apiVersion: v1
kind: Namespace
metadata:
  name: cloudretro
---
# Configmap for Worker
apiVersion: v1
kind: ConfigMap
metadata:
  name: cloudretro-config-w
  namespace: cloudretro
  labels:
    app: worker
data:
  CLOUD_GAME_WORKER_NETWORK_COORDINATORADDRESS: cloudretro.${fqdn}:8000
  CLOUD_GAME_WORKER_NETWORK_PUBLICADDRESS: cloudretro-worker.${fqdn}
---
# Configmap for Coordinator
apiVersion: v1
kind: ConfigMap
metadata:
  name: cloudretro-config-c
  namespace: cloudretro
  labels:
    app: coordinator
data:
  CLOUD_GAME_WEBRTC_ICESERVERS_0_URL: turn:cloudretro-udp.${fqdn}:3478
  CLOUD_GAME_WEBRTC_ICESERVERS_0_USERNAME: user-1
  CLOUD_GAME_WEBRTC_ICESERVERS_0_CREDENTIAL: pass-1
---
# Coordinator deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: coordinator-deployment
  namespace: cloudretro
spec:
  replicas: 1
  selector:
    matchLabels:
      app: coordinator
  template:
    metadata:
      labels:
        app: coordinator
    spec:
      containers:
      - name: coordinator
        resources:
          limits:
            cpu: 200m
            memory: 256Mi
          requests:
            cpu: 200m
            memory: 256Mi
        image: valniae/snekyrepo:cloudimage5
        envFrom:
          - configMapRef:
              name: cloudretro-config-c
        command: ["coordinator"]
        args: ["--v=5"]
        ports:
        - containerPort: 8000
---
# Coordinator LoadBalancer for HTTP
apiVersion: v1
kind: Service
metadata:
  name: coordinator-lb-svc
  namespace: cloudretro
  annotations:
    external-dns.alpha.kubernetes.io/hostname: cloudretro.${fqdn}
spec:
  selector:
    app: coordinator
  ports:
    - port: 8000
      targetPort: 8000
  type: LoadBalancer
---
# Worker deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: worker-deployment
  namespace: cloudretro
spec:
  replicas: 1
  selector:
    matchLabels:
      app: worker
  template:
    metadata:
      labels:
        app: worker
    spec:
      containers:
      - name: worker
        resources:
          limits:
            cpu: 500m
            memory: 500Mi
          requests:
            cpu: 500m
            memory: 256Mi
        image: valniae/snekyrepo:cloudimage5
        envFrom:
          - configMapRef:
              name: cloudretro-config-w
        command: ["worker"]
        args: ["--v=5"]
        ports:
        - containerPort: 9000
          containerPort: 8443
---
# Worker LoadBalancer for HTTP
apiVersion: v1
kind: Service
metadata:
  name: worker-lb-svc
  namespace: cloudretro
  annotations:
    external-dns.alpha.kubernetes.io/hostname: cloudretro-worker.${fqdn}
spec:
  selector:
    app: worker
  ports:
    - port: 9000
      targetPort: 9000
      #nodePort: 30002
  type: LoadBalancer
---
# Worker ClusterIP for STUNner forwarding + gateways
apiVersion: v1
kind: Service
metadata:
  name: worker-ci-udp-svc
  namespace: cloudretro
spec:
  selector:
    app: worker
  ports:
    - protocol: UDP
      port: 8443
      targetPort: 8443
  type: ClusterIP
---
apiVersion: gateway.networking.k8s.io/v1alpha2
kind: Gateway
metadata:
  name: udp-gateway-cloudretro
  namespace: stunner
spec:
  gatewayClassName: stunner-gatewayclass
  listeners:
    - name: udp-listener
      port: 3478
      protocol: UDP
---
apiVersion: gateway.networking.k8s.io/v1alpha2
kind: UDPRoute
metadata:
  name: worker-udp-route
  namespace: stunner
spec:
  parentRefs:
    - name: udp-gateway-cloudretro
  rules:
    - backendRefs:
        - name: worker-ci-udp-svc
          namespace: cloudretro